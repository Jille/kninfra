#
# Executes a sync generated by gen-sync.py
#

import os
import sys
import os.path
import cStringIO
from common import *

def escapable_space_split(text):
	""" Splits text on spaces except for those escaped by \\ """
	cur = ''
	ps = False
	for c in text:
		if ps:
			if c == '\\' or c == ' ':
				cur += c
			else:
				cur += '\\'+c
			ps = False
		else:
			if c == '\\':
				ps = True
			elif c == ' ':
				yield cur
				cur = ''
			else:
				cur += c
	if cur != ' ':
		yield cur

def _get_by_path(bits, _globals):
	c = None
	for i in xrange(len(bits)):
		try:
			c = globals()[bits[i]] if c is None else getattr(c, bits[i])
		except (AttributeError, KeyError):
			c = __import__('.'.join(bits[:i+1]), _globals,
				fromlist=[bits[i+1]] if i+1 < len(bits) else [])
	return c

def get_by_path(path, _globals=None):
	""" Returns an object by <path>, importing modules if necessary """
	if _globals is None: _globals = list()
	return _get_by_path(path.split('.'), _globals)

if __name__ == '__main__':
	p = os.path.dirname(sys.argv[0])
	if p != '': os.chdir(p)
	actions = dict()
	for i in os.listdir('actions'):
		if i[-3:] != '.py': continue
		try:
			v = get_by_path('actions.%s.execute' % i[:-3])
			actions[i[:-3]] = v
		except (ImportError, AttributeError):
			pass
	while True:
		l = sys.stdin.readline()
		if l == '': break
		l = l[:-1]
		l = l.split('#')[0]
		if l.strip() == '': continue
		action, args = l.split(' ', 1)
		args = list(escapable_space_split(args.strip()))
		if not action in actions:
			print 'WARNING Action %s not found' % action
		actions[action](args)
